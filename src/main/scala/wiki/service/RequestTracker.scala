package wiki.service

import scala.collection.mutable

class RequestTracker {

  /**
    * Track a request in progress.
    *
    * @param name      The name of the request being tracked
    * @param procedure A call-by-name procedure to call with tracking
    * @tparam T        The native type returned by the procedure
    * @return          The value generated by the procedure
    */
  def track[T](name: String, procedure: => T): T = {
    val token = rand.nextLong()
    begin(name, token)
    val result = procedure // Call-by-name
    end(name, token)
    result
  }

  /**
    * Get per-request counts of current requests in flight.
    *
    * @return A map of request names to the number of in-flight requests
    */
  def getCounts(): Map[String, Int] = this.synchronized {
    val result = mutable.Map[String, Int]()
    inFlight.keys.foreach(name => result.put(name, inFlight(name).size))

    result.toMap
  }

  private def begin(name: String, token: Long): Unit = this.synchronized {
    inFlight.getOrElseUpdate(name, mutable.Set[Long]()).add(token): Unit
  }

  private def end(name: String, token: Long): Unit = this.synchronized {
    inFlight.getOrElseUpdate(name, mutable.Set[Long]()).remove(token): Unit
  }

  private val rand = new scala.util.Random

  private val inFlight = mutable.Map[String, mutable.Set[Long]]()
}
